# Windows testing using Visual Studio.

# Syntax for this file:
# http://www.appveyor.com/docs/appveyor-yml

# See http://msdn.microsoft.com/en-us/library/ms164311.aspx for
# command-line options to MSBuild.

# Speeding up a Visual Studio build.
# http://blogs.msdn.com/b/vcblog/archive/2011/01/05/damn-my-vc-project-is-building-slower-in-vs2010-what-do-i-do-now-a-step-by-step-guide.aspx
  
# TODO deploy source zip also.
shallow_clone: true

image: Visual Studio 2017

platform: x64

# No need to run CI on the branch if we're also running CI for a PR.
skip_branch_with_pr: true

nuget:
  disable_publish_on_pr: true

environment:
  OPENSIM_CORE_GIT_TAG: 0658f230897b7d62c06e991b9866c9c2c4ebde1e
  # The simbody commit/tag is in opensim-core/dependencies/CMakeLists.txt.
  OPENSIM_GUI_GIT_TAG: d8bfa962e67111f3608ee32eab10e40602477b73 
  # TODO how to handle opensim-models, opensim-visualizer, three.js?
  CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
  JAVA_DIR: "C:\\Program Files\\Java\\jdk1.8.0"
  PYTHON_DIR: "C:\\Python27-x64"
  # Used by FindAnt.cmake:
  ANT_HOME: "C:\\Program Files\\NetBeans 8.2\\extide\\ant"
  NSIS_DIR: "C:\\Program Files (x86)\\NSIS"
  matrix:
    #- CMAKE_TOOLSET: "v140"
    #  NUGET_PACKAGE_ID_SUFFIX: "-VC140"
    - CMAKE_TOOLSET: "v141"
      NUGET_PACKAGE_ID_SUFFIX: "-VC141"

init:
  # Note: python 2.7 32bit is already on the path. We want v2.7 64bit,
  # so we must add v2.7 64bit earlier on the PATH so that CMake finds it when
  # configuring.
  # The Scripts directory is for putting nosetests on the path.
  # http://www.appveyor.com/docs/installed-software
  - SET PATH=%PYTHON_DIR%;%PATH%
  - SET OPENSIM_CORE_SOURCE_DIR=C:\projects\opensim-core
  - SET OPENSIM_CORE_BUILD_DIR=C:\projects\opensim-core-build
  - SET OPENSIM_CORE_INSTALL_DIR=C:\projects\opensim-core-install
  - SET OPENSIM_CORE_DEP_SOURCE_DIR=%OPENSIM_CORE_SOURCE_DIR%\dependencies
  - SET OPENSIM_CORE_DEP_BUILD_DIR=C:\projects\opensim-core-dep-build
  - SET OPENSIM_CORE_DEP_INSTALL_DIR=C:\projects\opensim-core-dep-install
  - SET OPENSIM_GUI_SOURCE_DIR=C:\projects\opensim-gui
  - SET OPENSIM_GUI_BUILD_DIR=C:\projects\opensim-gui-build
  # The CMake variable JAVA_HOME tells CMake where to look for Java.
  - SET JAVA_HOME=%JAVA_DIR%
  - SET PATH=%JAVA_HOME%\bin;%PATH%
  - SET PATH=%NSIS_DIR%;%PATH%

cache:
  ## Cache swig, which we install via AppVeyor.
  # The syntax here is <dir-to-cache> -> <invalidated-when-this-file-changes>
  # If the appveyor.yml script is changed, then the cache is invalidated.
  # https://www.appveyor.com/docs/build-cache/
  - C:\ProgramData\chocolatey\bin -> appveyor.yml # swig.exe
  - C:\ProgramData\chocolatey\lib -> appveyor.yml # supporting swig Lib files.

install:
  - cmake --version

  ## Use Chocolatey to install SWIG.
  # Only install swig if it isn't present (as a result of AppVeyor's caching).
  # SWIG 3.0.8 is the minimum required version, but it does not yet exist in
  # Chocolatey.
  - IF NOT EXIST C:\ProgramData\chocolatey\bin\swig.exe choco install swig --version 3.0.9 --yes --limit-output #> $null

  - choco install doxygen.portable --yes

  ## The GUI is built with the Netbeans platform.
  # We need 8.2 and this isn't available on Chocolatey.
  #- ps: choco install netbeans-jee --version 8.1 --yes --limit-output --allow-empty-checksums| Out-Null
  # https://netbeans.org/downloads/start.html?platform=windows&lang=en&option=javase
  - appveyor DownloadFile http://download.netbeans.org/netbeans/8.2/final/bundles/netbeans-8.2-javase-windows.exe
  # Make sure the NetBeans installer is not corrupted.
  - ps: $expectedHash = "7b0646306a7488e617837da1517a86c08b7cf6fbe4dd9d74e8a4564b5ffde004".ToUpper()
  - ps: $hashFromFile = Get-FileHash -Algorithm SHA256 -Path .\netbeans-8.2-javase-windows.exe
  - ps: if (($hashFromFile.Hash) -ne ($expectedHash)) { Write-Error "Hash doesn't match." }
  # Install NetBeans
  - ps: .\netbeans-8.2-javase-windows.exe --silent | Out-Null # This installer is gregaroius.

build_script:
  ## Obtain opensim-core source code.
  # TODO should we clone the git repo instead of downloading a zip? Does CMake
  # extract any information from the git repo?
  - SET OPENSIM_CORE_ZIP=%OPENSIM_CORE_GIT_TAG%.zip
  - appveyor DownloadFile https://github.com/opensim-org/opensim-core/archive/%OPENSIM_CORE_ZIP%
  - 7z x %OPENSIM_CORE_ZIP% -o%OPENSIM_CORE_SOURCE_DIR%

  ## Superbuild dependencies. 
  - mkdir %OPENSIM_CORE_DEP_BUILD_DIR%
  - cd %OPENSIM_CORE_DEP_BUILD_DIR%
  - cmake %OPENSIM_CORE_DEP_SOURCE_DIR% -G"%CMAKE_GENERATOR%" -T"%CMAKE_TOOLSET%" -DCMAKE_INSTALL_PREFIX=%OPENSIM_CORE_DEP_INSTALL_DIR% -DSUPERBUILD_simbody=ON
  - cmake --build . --config Release -- /maxcpucount:4 /verbosity:quiet
  - mkdir %OPENSIM_CORE_BUILD_DIR%
  ## Configure and build OpenSim.
  # Must create separate build dir, otherwise can't read test files
  # for some reason.
  - cd %OPENSIM_CORE_BUILD_DIR%
  # Configure.
  # Set the CXXFLAGS environment variable to turn warnings into errors.
  - cmake -E env CXXFLAGS="/WX" cmake %OPENSIM_CORE_SOURCE_DIR% -G"%CMAKE_GENERATOR%" -T"%CMAKE_TOOLSET%" -DOPENSIM_DEPENDENCIES_DIR=%OPENSIM_CORE_DEP_INSTALL_DIR% -DCMAKE_INSTALL_PREFIX=%OPENSIM_CORE_INSTALL_DIR% -DBUILD_JAVA_WRAPPING=ON -DBUILD_PYTHON_WRAPPING=ON -DWITH_BTK:BOOL=ON

  # Build.
  - cmake --build . --target doxygen --config Release
  - cmake --build . --config Release -- /maxcpucount:4 /verbosity:quiet
  - cmake --build . --target install --config Release -- /maxcpucount:4 /verbosity:quiet

  # Obtain opensim-gui source code.
  - git clone https://github.com/opensim-org/opensim-gui %OPENSIM_GUI_SOURCE_DIR%
  - cd %OPENSIM_GUI_SOURCE_DIR%
  # TODO how to handle tags for these submodules?
  - git submodule update --init --recursive --depth 1 -- opensim-models opensim-visualizer Gui/opensim/threejs


    # Build opensim-gui.
  - mkdir %OPENSIM_GUI_BUILD_DIR%
  - cd %OPENSIM_GUI_BUILD_DIR%
  - cmake %OPENSIM_GUI_SOURCE_DIR% -G"Visual Studio 15 2017 Win64" -DCMAKE_PREFIX_PATH=%OPENSIM_CORE_INSTALL_DIR% -DANT_ARGS="-Dnbplatform.default.netbeans.dest.dir=C:/Program Files/NetBeans 8.2;-Dnbplatform.default.harness.dir=C:/Program Files/NetBeans 8.2/harness"
  - cmake --build . --target CopyOpenSimCore --config Release
  - cmake --build . --target CopyModels --config Release
  - cmake --build . --target PrepareInstaller --config Release
  - cmake --build . --target CopyJRE --config Release
  - cmake --build . --target CopyVisualizer --config Release

after_test:
  - cd %APPVEYOR_BUILD_FOLDER% 
  # https://www.appveyor.com/docs/packaging-artifacts/
  # TODO use shortened git commit if not using a tag.
  - SET OPENSIM_CORE_SOURCE_ZIP=OpenSimCore-%OPENSIM_CORE_GIT_TAG%.zip
  - 7z a %OPENSIM_CORE_SOURCE_ZIP% %OPENSIM_CORE_INSTALL_DIR%
  - appveyor PushArtifact %OPENSIM_CORE_SOURCE_ZIP%

  - cd %OPENSIM_GUI_SOURCE_DIR%\Gui\opensim\dist\installer\
  - makensis make_installer.nsi
  - ps: Get-ChildItem .\*.exe | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

  - SET OPENSIM_GUI_ZIP=OpenSim-%OPENSIM_GUI_GIT_TAG%.zip
  - 7z a %OPENSIM_GUI_ZIP% %OPENSIM_GUI_SOURCE_DIR%\Gui\opensim\dist\installer\opensim\
  - appveyor PushArtifact %OPENSIM_GUI_ZIP%

# The following, if uncommented, should allow you to remote-desktop into
# the Appveyor build machine.
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
